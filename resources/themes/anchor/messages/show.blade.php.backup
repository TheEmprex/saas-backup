<x-layouts.app>
    <div class="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 text-slate-800 dark:text-slate-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div class="mb-6">
                <a href="{{ route('messages.web.index') }}" class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-all duration-200 bg-white dark:bg-slate-800/50 px-4 py-2 rounded-lg shadow-sm hover:shadow-md">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                    Back to Messages
                </a>
            </div>
            <div class="bg-white dark:bg-slate-800/50 border border-slate-200 dark:border-slate-700 rounded-2xl shadow-lg flex flex-col" style="height: 80vh;">
                <!-- Chat Header -->
                <div class="p-4 border-b border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800 rounded-t-2xl flex justify-between items-center">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-xl relative shadow-inner">
                            {{ substr($contact->name, 0, 1) }}
                            <div id="contact-online-indicator" class="absolute bottom-0 right-0 w-3.5 h-3.5 bg-slate-400 rounded-full border-2 border-white dark:border-slate-800"></div>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-slate-900 dark:text-white">{{ $contact->name }}</h3>
                            <p id="contact-status-text" class="text-sm text-slate-500 dark:text-slate-400">Offline</p>
                        </div>
                    </div>
                </div>
                <!-- Messages Area -->
                <div class="flex-1 overflow-y-auto p-6 space-y-6" id="messages-container">
                    <!-- Messages will be loaded here by JavaScript -->
                </div>
                <!-- Message Input -->
                <div class="p-4 border-t border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800 rounded-b-2xl">
                    <div id="attached-files-preview" class="mb-3 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2"></div>
                    <form id="message-form" class="flex items-center space-x-3">
                        <label for="file-input" class="p-2 text-slate-500 hover:text-purple-600 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors cursor-pointer" title="Attach files">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path></svg>
                            <input type="file" id="file-input" multiple class="hidden">
                        </label>
                        <div class="flex-1 relative">
                            <textarea id="message-textarea" rows="1" class="w-full rounded-lg border-slate-300 dark:border-slate-600 bg-slate-50 dark:bg-slate-700 text-slate-900 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 resize-none placeholder-slate-400 dark:placeholder-slate-500 pr-10" placeholder="Type a message..."></textarea>
                        </div>
                        <button id="send-button" type="submit" class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-3 rounded-full hover:from-blue-700 hover:to-purple-700 transition-all duration-300 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path></svg>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @push('scripts')
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const contactId = {{ $contact->id }};
            const authUserId = {{ auth()->id() }};
            const messagesContainer = document.getElementById('messages-container');
            const messageForm = document.getElementById('message-form');
            const messageTextarea = document.getElementById('message-textarea');
            const sendButton = document.getElementById('send-button');
            const fileInput = document.getElementById('file-input');
            const attachedFilesPreview = document.getElementById('attached-files-preview');
            let lastMessageId = 0;
            let attachedFiles = [];

            function fetchInitialMessages() {
                fetch("{{ route('messages.web.show', $contact->id) }}", { headers: { 'Accept': 'application/json' } })
                    .then(response => response.json())
                    .then(data => {
                        renderMessages(data.messages.data, true);
                        scrollToBottom();
                    });
            }

            function fetchNewMessages() {
                fetch("{{ route('messages.web.show', $contact->id) }}?since_id=" + lastMessageId, { headers: { 'Accept': 'application/json' } })
                    .then(response => response.json())
                    .then(data => {
                        if(data.messages.length > 0) {
                            renderMessages(data.messages, false);
                            scrollToBottom();
                        }
                    });
            }
            
            function renderMessages(messages, isInitial) {
                if (isInitial) messagesContainer.innerHTML = '';
                messages.forEach(message => {
                    messagesContainer.appendChild(createMessageElement(message));
                    lastMessageId = message.id;
                });
            }

            function createMessageElement(message) {
                const isSender = message.sender_id === authUserId;
                const el = document.createElement('div');
                el.className = `flex ${isSender ? 'justify-end' : 'justify-start'}`;

                let attachmentsHtml = '';
                if (message.formatted_attachments && message.formatted_attachments.length > 0) {
                    attachmentsHtml = message.formatted_attachments.map(file => {
                        if(file.is_image) {
                             return `<a href="${file.url}" target="_blank"><img src="${file.url}" class="mt-2 rounded-lg max-w-xs"/></a>`;
                        }
                        return `<a href="${file.url}" target="_blank" class="mt-2 flex items-center bg-slate-200 dark:bg-slate-600/50 p-2 rounded-lg hover:bg-slate-300 dark:hover:bg-slate-600"><span class="text-2xl mr-2">${file.icon}</span><div><p class="font-semibold text-sm">${file.name}</p><p class="text-xs text-slate-500 dark:text-slate-400">${file.formatted_size}</p></div></a>`;
                    }).join('');
                }

                el.innerHTML = `<div class="max-w-md"><div class="px-4 py-3 rounded-2xl shadow-md ${isSender ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white' : 'bg-white dark:bg-slate-700'}"><p class="text-base">${message.message_content}</p><div class="mt-2">${attachmentsHtml}</div><p class="text-xs mt-2 ${isSender ? 'text-blue-100/80' : 'text-slate-400'} text-right">${new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</p></div></div>`;
                return el;
            }

            function scrollToBottom() { messagesContainer.scrollTop = messagesContainer.scrollHeight; }

            fileInput.addEventListener('change', () => {
                attachedFiles = Array.from(fileInput.files);
                renderFilePreviews();
            });

            function renderFilePreviews() {
                attachedFilesPreview.innerHTML = '';
                if (attachedFiles.length === 0) return;
                attachedFiles.forEach((file, index) => {
                    const el = document.createElement('div');
                    el.className = 'relative p-2 bg-slate-100 dark:bg-slate-700 rounded-lg text-xs';
                    el.innerHTML = `<p class="font-semibold truncate">${file.name}</p><p class="text-slate-500">${(file.size / 1024).toFixed(1)} KB</p><button data-index="${index}" class="absolute top-1 right-1 text-slate-500 hover:text-red-500">&times;</button>`;
                    el.querySelector('button').onclick = (e) => {
                        e.preventDefault();
                        attachedFiles.splice(index, 1);
                        fileInput.value = "";
                        renderFilePreviews();
                    };
                    attachedFilesPreview.appendChild(el);
                });
            }

            messageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const content = messageTextarea.value.trim();
                if (content === '' && attachedFiles.length === 0) return;
                const formData = new FormData();
                formData.append('content', content);
                attachedFiles.forEach(file => { formData.append('attachments[]', file); });
                sendButton.disabled = true;

                fetch("{{ route('messages.web.store', $contact->id) }}", { method: 'POST', headers: { 'X-CSRF-TOKEN': '{{ csrf_token() }}', 'Accept': 'application/json' }, body: formData })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            messagesContainer.appendChild(createMessageElement(data.message));
                            scrollToBottom();
                            messageTextarea.value = '';
                            fileInput.value = '';
                            attachedFiles = [];
                            renderFilePreviews();
                        } else { alert('Error: ' + (data.error || 'Could not send message.')); }
                    })
                    .finally(() => { sendButton.disabled = false; });
            });

            function updateOnlineStatus() {
                fetch(`/users/${contactId}/status`).then(response => response.json()).then(data => {
                    const indicator = document.getElementById('contact-online-indicator');
                    const statusText = document.getElementById('contact-status-text');
                    indicator.classList.toggle('bg-green-500', data.is_online);
                    indicator.classList.toggle('bg-slate-400', !data.is_online);
                    statusText.textContent = data.is_online ? 'Online' : 'Offline';
                });
            }

            fetchInitialMessages();
            updateOnlineStatus();
            setInterval(fetchNewMessages, 3000);
            setInterval(updateOnlineStatus, 20000);
        });
    </script>
    @endpush
</x-layouts.app>
