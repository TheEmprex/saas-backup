version: '3.8'

services:
  # =============================================================================
  # Application Service
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: saas-app:dev
    container_name: saas_app
    restart: unless-stopped
    ports:
      - "8000:9000"
    volumes:
      - .:/var/www
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=db
      - DB_DATABASE=saas_db
      - DB_USERNAME=saas_user
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
      - BROADCAST_DRIVER=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
    depends_on:
      - db
      - redis
      - mailhog
    networks:
      - saas-network

  # =============================================================================
  # Nginx Service
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: saas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - saas-network

  # =============================================================================
  # Database Service (PostgreSQL)
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: saas_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: saas_db
      POSTGRES_USER: saas_user
      POSTGRES_PASSWORD: secret
      POSTGRES_ROOT_PASSWORD: rootsecret
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - saas-network

  # =============================================================================
  # Redis Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: saas_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - saas-network

  # =============================================================================
  # Queue Worker Service
  # =============================================================================
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: saas_queue
    restart: unless-stopped
    volumes:
      - .:/var/www
    environment:
      - APP_ENV=local
      - DB_HOST=db
      - DB_DATABASE=saas_db
      - DB_USERNAME=saas_user
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=60
    networks:
      - saas-network

  # =============================================================================
  # Scheduler Service
  # =============================================================================
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: saas_scheduler
    restart: unless-stopped
    volumes:
      - .:/var/www
    environment:
      - APP_ENV=local
      - DB_HOST=db
      - DB_DATABASE=saas_db
      - DB_USERNAME=saas_user
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
    command: crond -f -l 8
    networks:
      - saas-network

  # =============================================================================
  # WebSocket Server (Laravel Echo Server)
  # =============================================================================
  websocket:
    image: node:18-alpine
    container_name: saas_websocket
    restart: unless-stopped
    working_dir: /app
    ports:
      - "6001:6001"
    volumes:
      - ./docker/echo-server:/app
      - ./docker/echo-server/laravel-echo-server.json:/app/laravel-echo-server.json
    command: >
      sh -c "npm install -g laravel-echo-server &&
             laravel-echo-server start"
    depends_on:
      - redis
    networks:
      - saas-network

  # =============================================================================
  # Mail Service (MailHog for development)
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: saas_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - saas-network

  # =============================================================================
  # Development Tools
  # =============================================================================
  
  # PHPMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: saas_phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_PORT: 5432
      PMA_USER: saas_user
      PMA_PASSWORD: secret
    depends_on:
      - db
    networks:
      - saas-network
    profiles:
      - tools

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: saas_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - saas-network
    profiles:
      - tools

  # Node.js for asset compilation
  node:
    image: node:18-alpine
    container_name: saas_node
    working_dir: /var/www
    volumes:
      - .:/var/www
    command: sh -c "npm install && npm run dev"
    profiles:
      - dev

  # =============================================================================
  # Production Services (overrides)
  # =============================================================================
  
  # Production app service
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: saas-app:prod
    container_name: saas_app_prod
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=db
      - DB_DATABASE=saas_db
      - DB_USERNAME=saas_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
    networks:
      - saas-network

  # =============================================================================
  # Monitoring and Observability
  # =============================================================================
  
  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: saas_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - saas-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: saas_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - saas-network
    profiles:
      - monitoring

# =============================================================================
# Networks
# =============================================================================
networks:
  saas-network:
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
